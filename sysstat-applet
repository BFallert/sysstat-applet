#!/usr/bin/env python

import mem, cpu, disk
import time, sys, signal, os, argparse
from PyQt4.Qt import *

def detach():
    stdin  = '/dev/null'
    stdout = '/dev/null'
    stderr = '/dev/null'

    try:
        pid = os.fork()
        if pid > 0:
            # exit first parent
            sys.exit(0)
    except OSError, e:
        sys.stderr.write("fork #1 failed: %d (%s)\n" % (e.errno, e.strerror))
        sys.exit(1)
        
    # decouple from parent environment
    os.chdir("/")
    os.setsid()
    os.umask(0)
    
    # do second fork
    try:
        pid = os.fork()
        if pid > 0:
            # exit from second parent
            sys.exit(0)
    except OSError, e:
        sys.stderr.write("fork #2 failed: %d (%s)\n" % (e.errno, e.strerror))
        sys.exit(1)
       
    # redirect standard file descriptors
    sys.stdout.flush()
    sys.stderr.flush()
    si = file(stdin, 'r')
    so = file(stdout, 'a+')
    se = file(stderr, 'a+', 0)
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())

def parseCommandLine():
    parser = argparse.ArgumentParser(
        description='System tray applet collection')
    parser.add_argument( '-d', '--daemon',
                         help='run as daemon', action="store_true")
    args = parser.parse_args()
    if args.daemon: detach()

def main():
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    parseCommandLine()
    a = QApplication(sys.argv)
    QApplication.setOrganizationName( "mechnich")
    QApplication.setApplicationName( "sysstat-applet")
    i = [cpu.IndicatorCpu(), mem.IndicatorMem(), disk.IndicatorDisk()]
    return a.exec_()

if __name__ == "__main__":
    main()
